name: Docker

on:
  workflow_call:
    inputs:
      artifact-name:
        type: string
        required: true
      dockerfile-directory:
        type: string
        required: true
      ref:
        type: string
        required: false
      project:
        type: string
        required: true
      should-upload-artifact-to-ecr:
        type: boolean
        required: true
        default: false

env:
  WORKING_DIR: ${{ inputs.dockerfile-directory }}
  ECR_REGISTRY: 245185850403.dkr.ecr.eu-west-1.amazonaws.com
  # AWS_OIDC_ROLE: ${{ vars[format('ACCOUNT_nonprod_TF_OIDC{0}_ROLE', (inputs.should-upload-artifact-to-ecr && '' || '_READONLY'))] || vars[format('TF_OIDC{0}_ROLE', (inputs.should-upload-artifact-to-ecr && '' || '_READONLY'))] }}
  # AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_OIDC_ROLE: ${{ secrets.SHARED_CORE_ECR_DEPLOY_ROLE_TERRAFORM }} # To be replaced by the variable for OIDC role is configured
  AWS_REGION: ${{ secrets.AWS_REGION }} # To be replaced by the variable for AWS region is configured
  AWS_SIGNER_PROFILE: ${{ secrets.DVSA_AWS_SHAREDCORECR_IMAGE_SIGNING_PROFILE }}

jobs:
  check-ecr:
    name: Check ECR
    if: ${{ inputs.should-upload-artifact-to-ecr }}
    runs-on: ubuntu-latest
    outputs:
      image-exists: ${{ steps.check-ecr.outputs.exists }}  
    env:
      PROJECT: ${{ inputs.project }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.SHARED_CORE_ECR_DEPLOY_ROLE_TERRAFORM }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Check if image already exists in ECR
        id: check-ecr
        run: exit 0

  lint:
    name: Lint
    needs:
      - check-ecr
    runs-on: ubuntu-latest
    if: ${{ always() && !cancelled() && !failure() && (needs.check-ecr.result == 'skipped' || !needs.check-ecr.outputs.image-exists) }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || null }}
          sparse-checkout: ${{ env.WORKING_DIR }}

      - uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ${{ env.WORKING_DIR }}/Dockerfile

  build:
    name: Build
    needs:
      - check-ecr
    runs-on: ubuntu-latest
    if: ${{ always() && !cancelled() && !failure() && (needs.check-ecr.result == 'skipped' || !needs.check-ecr.outputs.image-exists) }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || null }}
          path: ${{ inputs.project }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        if: ${{ inputs.should-upload-artifact-to-ecr }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_OIDC_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build ${{ inputs.should-upload-artifact-to-ecr && 'and push ' || '' }}Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: "{{defaultContext}}:${{ env.WORKING_DIR }}"
          platforms: linux/amd64,linux/arm64
          push: ${{ inputs.should-upload-artifact-to-ecr }}
          tags: ${{ env.ECR_REGISTRY }}/${{ inputs.artifact-name }}

      - name: Login to ECR
        if: ${{ inputs.should-upload-artifact-to-ecr }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ECR_REGISTRY }}

      - name: Setup Notation CLI
        if: ${{ inputs.should-upload-artifact-to-ecr }}
        uses: notaryproject/notation-action/setup@v1
        with:
          version: "1.1.0"

      - name: Sign artifact
        if: ${{ inputs.should-upload-artifact-to-ecr }}
        uses: notaryproject/notation-action/sign@v1
        with:
          plugin_name: com.amazonaws.signer.notation.plugin
          plugin_url: https://d2hvyiie56hcat.cloudfront.net/linux/amd64/plugin/latest/notation-aws-signer-plugin.zip
          plugin_checksum: cccfe8fdcdf853d83fd57ffc80524eddda75ad7ae9d9a257b087007230ec02f9
          key_id: ${{ env.AWS_SIGNER_PROFILE }}
          target_artifact_reference: ${{ env.ECR_REGISTRY }}/${{ inputs.artifact-name }}